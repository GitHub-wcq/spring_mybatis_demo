<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:c="http://www.springframework.org/schema/c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/jdbc 
    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
    http://www.springframework.org/schema/jee 
    http://www.springframework.org/schema/jee/spring-jee.xsd
    http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <description>spring profile配置</description>
    <context:property-placeholder location="classpath:spring/applicationContext.properties" />
	<!-- 配置扫描注解,不扫描 @Controller注解-->
	<context:component-scan base-package="com.wcq.datasourcewraop001">
	    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
    
    <!-- 配置数据源(写) -->  
    <bean id="dataSource_wr" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
    	<property name="driverClassName" value="${jdbc.driver}"></property>  
        <property name="url" value="${jdbc.url}"></property> 
        <property name="username" value="${jdbc.username}"></property>  
        <property name="password" value="${jdbc.password}"></property>  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="0"></property>  
        <!-- 连接池最大使用连接数量 -->  
        <property name="maxActive" value="20"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="0" />  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="60000" />  
        <property name="validationQuery">  
            <value>SELECT 1</value>  
        </property>  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        <property name="testWhileIdle" value="true" />  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="25200000" />  
        <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandoned" value="true" />  
        <!-- 1800秒，也就是30分钟 -->  
        <property name="removeAbandonedTimeout" value="1800" />  
        <!-- 关闭abanded连接时输出错误日志 -->  
        <property name="logAbandoned" value="true" />  
        <!-- 监控数据库 -->  
        <!-- <property name="filters" value="stat" /> -->  
        <property name="filters" value="mergeStat" />  
    </bean>
    
    <!-- 配置数据源(读) -->  
    <bean id="dataSource_r" class="com.alibaba.druid.pool.DruidDataSource"> 
    	<property name="driverClassName" value="${jdbc.r.driver}"></property>  
        <property name="url" value="${jdbc.r.url}"></property> 
        <property name="username" value="${jdbc.r.username}"></property>  
        <property name="password" value="${jdbc.r.password}"></property>  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="0"></property>  
        <!-- 连接池最大使用连接数量 -->  
        <property name="maxActive" value="20"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="0" />  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="60000" />  
        <property name="validationQuery">  
            <value>SELECT 1</value>  
        </property>  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        <property name="testWhileIdle" value="true" />  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="25200000" />  
        <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandoned" value="true" />  
        <!-- 1800秒，也就是30分钟 -->  
        <property name="removeAbandonedTimeout" value="1800" />  
        <!-- 关闭abanded连接时输出错误日志 -->  
        <property name="logAbandoned" value="true" />  
        <!-- 监控数据库 -->  
        <!-- <property name="filters" value="stat" /> -->  
        <property name="filters" value="mergeStat" />  
    </bean>
    
    <!-- 多数据源管理 -->
    <bean id="dynamicDataSource" class="com.wcq.datasourcewraop001.util.DynamicDataSource">  
       <!-- 通过key-value关联数据源 -->  
       <property name="targetDataSources">  
           <map>  
               <entry key="write" value-ref="dataSource_wr"></entry>  
               <entry key="read" value-ref="dataSource_r" ></entry>  
           </map>  
       </property>  
       <property name="defaultTargetDataSource" ref="dataSource_wr" />      
   </bean>  
   <!-- 定义切面用于切换数据源 -->
    <bean id="dataSourceAspect" class="com.wcq.datasourcewraop001.util.DataSourceAspect"></bean>
    <aop:config>
    	<aop:aspect ref="dataSourceAspect">
    		<aop:pointcut expression="execution(* com.wcq.datasourcewraop001.service.*.*(..))" id="pointcut"/>
    		<aop:before pointcut-ref="pointcut" method="before"/>
    	</aop:aspect>
    </aop:config>
    
    <!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource"/>
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.wcq.datasourcewraop001.entity"/>
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml"/>
		<property name="plugins">
			<list>
			<bean class="com.github.miemiedev.mybatis.paginator.OffsetLimitInterceptor">
			<property name="dialectClass"
			  value="com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect"></property>
			</bean>
			</list>
		</property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <!-- 自动扫描 com.imooc.dao下的interface,并加入IOC容器 -->  
        <property name="basePackage" value="com.wcq.datasourcewraop001.mapper" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean> 
    
	<!-- 事务管理器配置, spring-jdbc单数据源事务 --> 
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" lazy-init="true">
		<property name="dataSource" ref="dynamicDataSource"/>
	</bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    
</beans>